* Reference
** Technical Overview
- Subsystems
  - Hub:
    - manages user accounts
    - authentication
  - Proxy:
    - routes requests to the hub and single-user notebook server
  - Single-User Notebook Server
    - dedicated, single-user notebook server for each user. This server
      is started by a Spawner
      
  - Subsystem interactions
    - https://jupyterhub.readthedocs.io/en/stable/reference/technical-overview.html
      - "The Hub spawns the proxy (in the default JupyterHub configuration)"
      - "The proxy forwards all requests to the Hub by default"
      - "The Hub handles login, and spawns single-user notebook servers on demand"
      - "The Hub configures the proxy to forward url prefixes to single-user notebook servers"
      
    - authenticators control access to JupyterHub. 
      - This is where openedx user authentication is 

    - Spawners
      - "Next, spawners control how JupyterHub starts the individual
        notebook server for each user. The default spawner will start a
        notebook server on the same machine running under their system
        username. 

      - The other main option is to start each server in a
        separate container, often using Docker."
        - THIS ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^
      
** JupyterHub URL scheme
https://jupyterhub.readthedocs.io/en/stable/reference/urls.html

- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub][/hub/]] redirects to default page
  - redirect to /hub/home by adjusting config:
    #+BEGIN_SRC python
    c.JupyterHub.redirect_to_server = False
    #+END_SRC
- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-home][/hub/home]] 
- /hub/login - login page
- /hub/logout
  - Visiting /hub/logout clears cookies from the current browser. Note
    that logging out does not stop a user’s server(s) by default.
- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#user-username-servername][/user/:username(/:servername)]]
  - handled by the notebook server, not the hub
- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-user-username-servername][/hub/user/:username(/:servername)]]
  - complicated, check page for more details.
- /user-redirect/...
  
- Spawning
  [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-spawn-username-servername][/hub/spawn(/:username(/:servername))]]
  - spawn default server for the current user
    - TODO !!!!!!
      - This might be a good URL to use with if there is a generic
        "goto jupyterhub" tab in the course.
      - 
      
  [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-spawn-pending-username-servername][/hub/spawn-pending(/:username(/:servername))]]
  - "This page renders the progress view for the given spawn
    request. Once the server is ready, the browser is redirected to
    the running server at /user/:username/:servername/...."
  
- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-token][/hub/token]]
  - for users managing their API tokens.. not sure if we'll need this.
- [[https://jupyterhub.readthedocs.io/en/stable/reference/urls.html#hub-admin][/hub/admin]]

** Security Overview
- It is possible to serve untrusted users.
- notebook servers are single user
  - users may not install new packages.
  - DESIGN: Each user will should get their own docker instance?
    - This will probably be covered in the kubernetes docs
  - [[https://jupyterhub.readthedocs.io/en/stable/reference/websecurity.html#enable-subdomains][user subdomains]]
    - username.jupyter.mydomain.com
  - Prevent per user configuration in the /etc/jupyterhub_config.py
    #+BEGIN_SRC python
      Spawner.disable_user_config      
    #+END_SRC
  - [[https://jupyterhub.readthedocs.io/en/stable/reference/websecurity.html#isolate-packages-using-virtualenv][consider running server in virtualenv]] ?
  - Encrypt internal connections
  - tool for testing SSL 
    https://www.ssllabs.com/ssltest/analyze.html

** Authenticators
- default is PAM for local unix users.
- !! The goal is to use LTIauthenticaor
- 
  
** Spawners
** Services
** Writing a custom Proxy implementation
** Running proxy separately from the hub
** Using JupyterHub’s REST API
** Monitoring
** The Hub’s Database
** Working with templates and UI
** Eventlogging and Telemetry
** Configuring user environments
** Configuration examples
** Configure GitHub OAuth
** Using a reverse proxy
** Run JupyterHub without root privileges using sudo
** Configuration Reference
